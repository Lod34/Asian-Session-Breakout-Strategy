// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © LuxAlgo
//@version=5

strategy("Asian Session Breakout", overlay = true, max_boxes_count = 500, max_lines_count = 500)

var float asiatic_session_high = na
var float asiatic_session_low = na
var bool marketStructureShiftsBearish = false
var bool marketStructureShiftsBullish = false
var bool buy_side_sweep = false
var bool sell_side_sweep = false



//------------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------{

sessionSweepsGroup = 'Session Sweeps'
showBuySideSweepZones = input.bool(true, 'Buyside Sweep Zones', inline = 'SWPB', group = sessionSweepsGroup)
buySideSweepColor = input.color(color.new(color.orange, 37), '', inline = 'SWPB', group = sessionSweepsGroup)
buySideSweepMargin = input.float(1.3, 'Margin', minval = .5, maxval = 10, step = .1, inline = 'SWPB', group = sessionSweepsGroup)

showSellSideSweepZones = input.bool(true, 'Sellside Sweep Zones', inline = 'SWPS', group = sessionSweepsGroup)
sellSideSweepColor = input.color(color.new(color.blue, 37), '', inline = 'SWPS', group = sessionSweepsGroup)
sellSideSweepMargin = input.float(1.3, 'Margin', minval = .5, maxval = 10, step = .1, inline = 'SWPS', group = sessionSweepsGroup)

sweepMarginLength = input.int(5, '  Sweep Margin Length', minval = 2, maxval = 10, group = sessionSweepsGroup)
detectSweepsOncePerSession = input.bool(false, 'Detect Sweeps Once per Session', group = sessionSweepsGroup)

hideFakeSweepZones = input.bool(false, 'Hide Fake Sweep Zones', inline = 'SWPF', group = sessionSweepsGroup)
fakeSweepColor = input.color(color.new(#787b86, 73), '', inline = 'SWPF', group = sessionSweepsGroup)

sessionsGroup = "Sessions"
hour01 = '01:00', hour02 = '02:00', hour03 = '03:00', hour04 = '04:00', hour05 = '05:00', hour06 = '06:00'
hour07 = '07:00', hour08 = '08:00', hour09 = '09:00', hour10 = '10:00', hour11 = '11:00', hour12 = '12:00'
hour13 = '13:00', hour14 = '14:00', hour15 = '15:00', hour16 = '16:00', hour17 = '17:00', hour18 = '18:00'
hour19 = '19:00', hour20 = '20:00', hour21 = '21:00', hour22 = '22:00', hour23 = '23:00', hour00 = '00:00'

asiaSessionShow = input.bool(true , '', inline='AS' , group = sessionsGroup)
asiaSessionTitle = input.string('Asia' , '', inline='AS' , group = sessionsGroup)
asiaSessionStartTime = input.string(hour09, '' , options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='AS', group = sessionsGroup)
asiaSessionEndTime = input.string(hour18, '-', options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='AS', group = sessionsGroup)
asiaSessionColor = input.color(color.new(color.yellow, 0), '  ', inline='AS1', group = sessionsGroup)
asiaSessionExtendMaxMinMid = input.bool(true, 'Extend : Max/Min | Mid', inline = 'AS1', group = sessionsGroup)
asiaSessionShowMargin = input.bool(false , '', inline = 'AS1', group = sessionsGroup)
asiaSessionFillBackground = input.bool(true, 'Fill', inline = 'AS1', group = sessionsGroup)

londonSessionShow = input.bool(true , ''  , inline='LDN' , group = sessionsGroup)
londonSessionTitle = input.string('London' , '', inline='LDN' , group = sessionsGroup)
londonSessionStartTime = input.string(hour08, '' , options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='LDN', group = sessionsGroup)
londonSessionEndTime = input.string(hour17, '-', options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='LDN', group = sessionsGroup)
londonSessionColor = input.color(color.new(color.blue, 0), '  ', inline='LDN1', group = sessionsGroup)
londonSessionExtendMaxMinMid = input.bool(true, 'Extend : Max/Min | Mid', inline = 'LDN1', group = sessionsGroup)
londonSessionShowMargin = input.bool(false , '', inline = 'LDN1', group = sessionsGroup)
londonSessionFillBackground = input.bool(true, 'Fill', inline = 'LDN1', group = sessionsGroup)

newYorkAmSessionShow = input.bool(true , ''  , inline='NYA' , group = sessionsGroup)
newYorkAmSessionTitle = input.string('NY AM' , '', inline='NYA' , group = sessionsGroup)
newYorkAmSessionStartTime = input.string(hour08, '' , options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='NYA', group = sessionsGroup)
newYorkAmSessionEndTime = input.string(hour13, '-', options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='NYA', group = sessionsGroup)
newYorkAmSessionColor = input.color(color.new(color.orange, 0), '  ', inline='NYA1', group = sessionsGroup)
newYorkAmSessionExtendMaxMinMid = input.bool(true, 'Extend : Max/Min | Mid', inline = 'NYA1', group = sessionsGroup)
newYorkAmSessionShowMargin = input.bool(false , '', inline = 'NYA1', group = sessionsGroup)
newYorkAmSessionFillBackground = input.bool(true, 'Fill', inline = 'NYA1', group = sessionsGroup)

newYorkPmSessionShow = input.bool(true , ''  , inline='NYP' , group = sessionsGroup)
newYorkPmSessionTitle = input.string('NY PM' , '', inline='NYP' , group = sessionsGroup)
newYorkPmSessionStartTime = input.string(hour13, '' , options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='NYP', group = sessionsGroup)
newYorkPmSessionEndTime = input.string(hour19, '-', options = [hour00, hour01, hour02, hour03, hour04, hour05, hour06, hour07, hour08, hour09, hour10, hour11, hour12, hour13, hour14, hour15, hour16, hour17, hour18, hour19, hour20, hour21, hour22, hour23], inline='NYP', group = sessionsGroup)
newYorkPmSessionColor = input.color(color.new(color.red, 0), '  ', inline='NYP1', group = sessionsGroup)
newYorkPmSessionExtendMaxMinMid = input.bool(true, 'Extend : Max/Min | Mid', inline = 'NYP1', group = sessionsGroup)
newYorkPmSessionShowMargin = input.bool(false, '', inline = 'NYP1', group = sessionsGroup)
newYorkPmSessionFillBackground = input.bool(true, 'Fill', inline = 'NYP1', group = sessionsGroup)

newYorkDaylightSavingTime = input.bool(false , 'New York DST | London DST', inline = 'DST', group = sessionsGroup, tooltip = 'New York - Daylight Saving Time (DST)\n *DST Start : Second Sunday in March at 2:00\n *DST End : First Sunday in November at 2:00\n\nLondon - Daylight saving time (DST)\n *DST Start : Last Sunday in March at 1:00\n *DST End : Last Sunday in October at 1:00')
londonDaylightSavingTime = input.bool(false , '', inline = 'DST', group = sessionsGroup)

sessionsExtremeLines = input.bool(true , 'Sessions Extreme Lines | Sessions Names', inline = 'NAM', group = sessionsGroup)
sessionsNames = input.bool(true , '', inline = 'NAM', group = sessionsGroup)
sessionsLinesWidth = input.int(1 , '  Session Lines Width', group = sessionsGroup)
sessionsFillTransparency = input.int(95, '  Session Fill Transparency', minval = 0, maxval = 100, group = sessionsGroup)

marketStructureShiftsGroup = 'Market Structure Shifts'
marketStructureShiftsShow = input.bool(false, 'Market Structure Shifts', group = marketStructureShiftsGroup)
marketStructureShiftsDetectionLength = input.int(8, "Detection Length", minval = 1, group = marketStructureShiftsGroup)
marketStructureShiftsBullishColor = input.color(color.new(color.teal, 0), 'Market Structure Shifts : Bullish', inline = 'MSS', group = marketStructureShiftsGroup)
marketStructureShiftsBearishColor = input.color(color.new(color.red, 0), 'Bearish', inline = 'MSS', group = marketStructureShiftsGroup)

fairValueGapsGroup = 'Fair Value Gaps'
fairValueGapsShow = input.bool(false, 'Fair Value Gaps', group = fairValueGapsGroup)
fairValueGapsTooltip = 'The script displays the fair value gaps whose width is larger than a fixed-length atr (average true range) value multiplied by the value of the option.\n\n' + 
         'The option value set to 0 means no filtering is applied.\n\n' + 
         'Remark: no filtering will be applied for the first 144 (atr fixed-length) candles since the atr value won\'t be present'
fairValueGapsWidthFilter = input.float(1, 'Fair Value Gap Width Filter', minval = 0, step = .1, tooltip = fairValueGapsTooltip, group = fairValueGapsGroup)

fairValueGapsBullishColor = input.color(color.new(color.teal, 80), 'Bullish Imbalance', inline = 'FVG', group = fairValueGapsGroup)
fairValueGapsBearishColor = input.color(color.new(color.red, 80), 'Bearish Imbalance', inline = 'FVG', group = fairValueGapsGroup)

sessionsTabularViewGroup = 'Sessions Tabular View'
sessionsTabularViewShow = input.bool(true , 'Sessions Tabular View'  , group = sessionsTabularViewGroup, tooltip = 'Displays sessions tabular view\n - Date and Time,\n - Sessions Opening/Closing Countdown Timer and\n - Session Status')
hideIfNotForexMarketInstrument = input.bool(false, 'Hide if not Forex Market Instrument'  , group = sessionsTabularViewGroup)
sessionsTabularViewTableTextSize = input.string("Small", "  Table Text Size", options = [ "Tiny", "Small", "Normal"], inline='STAT',group = sessionsTabularViewGroup)
sessionsTabularViewTableTextSize := sessionsTabularViewTableTextSize == "Small" ? size.small : sessionsTabularViewTableTextSize == "Normal" ? size.normal : size.tiny
sessionsTabularViewPosition = input.string('Top Right', '', options = ['Top Left', 'Top Center', 'Top Right', 'Middle Right', 'Bottom Left', 'Bottom Center'], inline='STAT', group = sessionsTabularViewGroup) 

//-----------------------------------------------------------------------------}
// User Defined Types
//-----------------------------------------------------------------------------{

type Bar
    float open = open
    float high = high
    float low = low
    float close = close
    int   index = bar_index

type Session 
    string  []  titles
    float   []  openHours
    float   []  closeHours
    int     []  timeOffsets

    line        highLine
    line        midLine
    line        lowLine
    float       highPrice
    float       lowPrice

    box         buyZoneBox
    box         sellZoneBox
    bool        buyZone
    bool        buySide
    bool        sellZone
    bool        sellSide

    box         lastBuyZoneBox
    box         lastSellZoneBox
    bool        lastBuyZone
    bool        lastBuySide
    bool        lastSellZone
    bool        lastSellSide

type PivotPoint
    float  high
    int    highTime
    bool   highCrossed 

    float  low
    int    lowTime
    bool   lowCrossed

type FairValueGap
    box  [] upperFairValueGaps

//-----------------------------------------------------------------------------}
// Variables
//-----------------------------------------------------------------------------{

Bar currentBar = Bar.new()

timeframeMultiplier = timeframe.multiplier

var Session currentSession = Session.new(
     array.new <string>  (na),
     array.new <float>   (na),
     array.new <float>   (na),
     array.new <int>     (na),
     line(na), line(na), line(na), na, na, box(na), box(na), 
     false, false, false, false,
     box(na), box(na), 
     false, false, false, false
 )
sweepAverageTrueRange = ta.atr(21)

var PivotPoint currentPivotPoint = PivotPoint.new()
var shift = 0

var FairValueGap currentFairValueGap = FairValueGap.new(array.new <box>  (na))
fairValueGapAverageTrueRange = nz(ta.atr(144)) * fairValueGapsWidthFilter
var bool last = na 

if barstate.isfirst 
    currentSession.titles.push('Asia')  , currentSession.openHours.push(09), currentSession.closeHours.push(14), currentSession.timeOffsets.push(09)
    currentSession.titles.push('London'), currentSession.openHours.push(05), currentSession.closeHours.push(13), currentSession.timeOffsets.push(00)
    currentSession.titles.push('NY AM') , currentSession.openHours.push(08), currentSession.closeHours.push(13), currentSession.timeOffsets.push(-5)
    currentSession.titles.push('NY PM') , currentSession.openHours.push(13), currentSession.closeHours.push(19), currentSession.timeOffsets.push(-5)

//-----------------------------------------------------------------------------}
// Functions / Methods
//-----------------------------------------------------------------------------{

whatIsTheTime(_session, _dst) =>
    timeZone = 'Etc/UTC'
    daylightSavingTime = _dst ? 1 : 0
    utcTime = (currentSession.timeOffsets.get(currentSession.titles.indexof(_session)) + daylightSavingTime) * 3600000 + timenow
    [math.floor(utcTime / 3600000) % 24, math.floor(utcTime / 60000) % 60, math.floor(utcTime / 1000) % 60, dayofmonth(int(utcTime), timeZone), month(int(utcTime), timeZone), year(int(utcTime), timeZone), dayofweek(int(utcTime), timeZone)]

sessionDetection(_session, _dst) =>
    [h, m, s, D, M, Y, dayOfWeek] = whatIsTheTime(_session, _dst)

    hourText = h < 10 ? '0' + str.tostring(h) : str.tostring(h)
    minuteText = m < 10 ? '0' + str.tostring(m) : str.tostring(m)
    secondText = s < 10 ? '0' + str.tostring(s) : str.tostring(s)
    dayText = D < 10 ? '0' + str.tostring(D) : str.tostring(D)
    monthText = M < 10 ? '0' + str.tostring(M) : str.tostring(M)
    yearText = str.tostring(Y)
    dateTime = dayText + '/' + monthText + '/' + yearText + '-' + hourText + ':' + minuteText + ':' + secondText

    if dayOfWeek != 1 and dayOfWeek != 7
        sessionOpenHour = currentSession.openHours.get(currentSession.titles.indexof(_session))
        sessionCloseHour = currentSession.closeHours.get(currentSession.titles.indexof(_session))
        market = if h >= sessionOpenHour and h < sessionCloseHour
            hourCountdown = sessionCloseHour - h - 1
            minuteCountdown = 60 - m - 1
            secondCountdown = 60 - s
            secondCountdownText = secondCountdown < 10 ? '0' + str.tostring(secondCountdown) : str.tostring(secondCountdown)
            minuteCountdownText = minuteCountdown < 10 ? '0' + str.tostring(minuteCountdown) : str.tostring(minuteCountdown)
            hourCountdownText = hourCountdown < 10 ? '0' + str.tostring(hourCountdown) : str.tostring(hourCountdown)
            closes = hourCountdownText + ':' + minuteCountdownText + ':' + secondCountdownText
            if hourCountdown == 0
                secondCountdown % 2 == 0 ? dateTime + ' 🟢 Closes in ' + closes : dateTime + ' 🔴 Closes in ' + closes
            else
                dateTime + ' 🟢 Closes in ' + closes
        else
            hourOffset = if h < sessionOpenHour
                sessionOpenHour - h - 1
            else
                24 - h + sessionOpenHour - 1
            minuteOffset = 60 - m - 1
            secondOffset = 60 - s
            secondOffsetText = secondOffset < 10 ? '0' + str.tostring(secondOffset) : str.tostring(secondOffset)
            minuteOffsetText = minuteOffset < 10 ? '0' + str.tostring(minuteOffset) : str.tostring(minuteOffset)
            hourOffsetText = hourOffset < 10 ? '0' + str.tostring(hourOffset) : str.tostring(hourOffset)
            opens = hourOffsetText + ':' + minuteOffsetText + ':' + secondOffsetText
            if h >= sessionCloseHour and dayOfWeek == 6
                dateTime + ' 🟠 Weekend'
            else
                if hourOffset == 0
                    secondOffset % 2 == 0 ? dateTime + ' 🔴 Opens in ' + opens : dateTime + ' 🟢 Opens in ' + opens
                else
                    dateTime + ' 🔴 Opens in ' + opens
        market
    else
        dateTime + ' 🟠 Weekend'

isSession(_session, _dst) =>
    timeZone  = 'Etc/UTC'
    daylightSavingTime = _dst ? 1 : 0
    sessionIndex = currentSession.titles.indexof(_session)
    utcTime = (currentSession.timeOffsets.get(sessionIndex) + daylightSavingTime) * 3600000 + time
    h = math.floor(utcTime / 3600000) % 24

    h >= currentSession.openHours.get(sessionIndex) and h < currentSession.closeHours.get(sessionIndex)


method clearFairValueGap(FairValueGap _id) =>
    _id.upperFairValueGaps.pop()

method updateFairValueGap(FairValueGap _id, _high, _low, _price) =>
    currentUpperFairValueGap = _id.upperFairValueGaps.get(0)
    topUpperFairValueGap = currentUpperFairValueGap.get_top()
    bottomUpperFairValueGap = currentUpperFairValueGap.get_bottom()

    if _high > bottomUpperFairValueGap and _low < topUpperFairValueGap
        if _price
            if _low > bottomUpperFairValueGap
                na
            else
                currentFairValueGap.clearFairValueGap()

        else
            if _high < topUpperFairValueGap
                na
            else
                currentFairValueGap.clearFairValueGap()

    currentUpperFairValueGap.set_right(currentBar.index)
 
//-----------------------------------------------------------------------------}
// Calculations - Sessions Tabular View
//-----------------------------------------------------------------------------{

currentSession.titles.set(0, asiaSessionTitle)
currentSession.openHours.set(currentSession.titles.indexof(asiaSessionTitle)  , str.tonumber(str.substring(asiaSessionStartTime  , 0, str.pos(asiaSessionStartTime  , ":"))))
currentSession.closeHours.set(currentSession.titles.indexof(asiaSessionTitle)  , str.tonumber(str.substring(asiaSessionEndTime  , 0, str.pos(asiaSessionEndTime  , ":"))))

currentSession.titles.set(1, londonSessionTitle)
currentSession.openHours.set(currentSession.titles.indexof(londonSessionTitle), str.tonumber(str.substring(londonSessionStartTime , 0, str.pos(londonSessionStartTime , ":"))))
currentSession.closeHours.set(currentSession.titles.indexof(londonSessionTitle), str.tonumber(str.substring(londonSessionEndTime , 0, str.pos(londonSessionEndTime , ":"))))

currentSession.titles.set(2, newYorkAmSessionTitle)
currentSession.openHours.set(currentSession.titles.indexof(newYorkAmSessionTitle) , str.tonumber(str.substring(newYorkAmSessionStartTime, 0, str.pos(newYorkAmSessionStartTime, ":"))))
currentSession.closeHours.set(currentSession.titles.indexof(newYorkAmSessionTitle) , str.tonumber(str.substring(newYorkAmSessionEndTime, 0, str.pos(newYorkAmSessionEndTime, ":"))))

currentSession.titles.set(3, newYorkPmSessionTitle)
currentSession.openHours.set(currentSession.titles.indexof(newYorkPmSessionTitle) , str.tonumber(str.substring(newYorkPmSessionStartTime, 0, str.pos(newYorkPmSessionStartTime, ":"))))
currentSession.closeHours.set(currentSession.titles.indexof(newYorkPmSessionTitle) , str.tonumber(str.substring(newYorkPmSessionEndTime, 0, str.pos(newYorkPmSessionEndTime, ":"))))

forexOrCfd = syminfo.type == 'forex' or syminfo.type == 'cfd'

tablePosition = switch sessionsTabularViewPosition
    'Top Left'      => position.top_left
    'Top Center'    => position.top_center
    'Top Right'     => position.top_right
    'Middle Right'  => position.middle_right
    'Bottom Left'   => position.bottom_left
    'Bottom Center' => position.bottom_center

hide = hideIfNotForexMarketInstrument ? forexOrCfd ? true : false : true

if barstate.islast and sessionsTabularViewShow and hide
    var table clock = table.new(tablePosition, 3, 4, border_width = 3)

    session = sessionDetection(asiaSessionTitle, false)
    sessionColor = str.contains(session, 'Closes') ? #26a69a : #ef5350
    table.cell(clock, 0, 0, "█", text_size = sessionsTabularViewTableTextSize, text_color = asiaSessionColor)
    table.cell(clock, 1, 0, asiaSessionTitle , text_color = asiaSessionColor, bgcolor = color.new(asiaSessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)
    table.cell(clock, 2, 0, session, text_color = sessionColor, bgcolor = color.new(sessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)

    session := sessionDetection(londonSessionTitle, londonDaylightSavingTime)
    sessionColor := str.contains(session, 'Closes') ? #26a69a : #ef5350
    table.cell(clock, 0, 1, "█", text_size = sessionsTabularViewTableTextSize, text_color = londonSessionColor)
    table.cell(clock, 1, 1, londonSessionTitle , text_color = londonSessionColor, bgcolor = color.new(londonSessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)
    table.cell(clock, 2, 1, session, text_color = sessionColor, bgcolor = color.new(sessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)

    session := sessionDetection(newYorkAmSessionTitle, newYorkDaylightSavingTime)
    sessionColor := str.contains(session, 'Closes') ? #26a69a : #ef5350
    table.cell(clock, 0, 2, "█", text_size = sessionsTabularViewTableTextSize, text_color = newYorkAmSessionColor)
    table.cell(clock, 1, 2, newYorkAmSessionTitle , text_color = newYorkAmSessionColor, bgcolor = color.new(newYorkAmSessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)
    table.cell(clock, 2, 2, session, text_color = sessionColor , bgcolor = color.new(sessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)

    session := sessionDetection(newYorkPmSessionTitle, newYorkDaylightSavingTime)
    sessionColor := str.contains(session, 'Closes') ? #26a69a : #ef5350
    table.cell(clock, 0, 3, "█", text_size = sessionsTabularViewTableTextSize, text_color = newYorkPmSessionColor)
    table.cell(clock, 1, 3, newYorkPmSessionTitle, text_color = newYorkPmSessionColor, bgcolor = color.new(newYorkPmSessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)
    table.cell(clock, 2, 3, session, text_color = sessionColor , bgcolor = color.new(sessionColor, 75), text_halign = text.align_left, text_size = sessionsTabularViewTableTextSize)

//-----------------------------------------------------------------------------}
// Calculations - Sessions
//-----------------------------------------------------------------------------{

if timeframe.isintraday and timeframeMultiplier <= 5
    
    var line highLine = na, var line lowLine = na, var box sessionBox = na
    var line lastHighLine = na, var line lastLowLine = na, var line lastMidLine = na

    if asiaSessionShow 
        isCurrentSession = isSession(londonSessionShow ? londonSessionTitle : newYorkAmSessionShow ? newYorkAmSessionTitle : newYorkPmSessionShow ? newYorkPmSessionTitle : asiaSessionTitle, false)

        if isCurrentSession and isCurrentSession != isCurrentSession[1]
            
            highLine := line.new(currentBar.index, currentBar.high, currentBar.index, currentBar.high, xloc.bar_index, extend.none, color.new(asiaSessionColor, sessionsExtremeLines ? 0 : sessionsFillTransparency), line.style_solid, sessionsLinesWidth)
            lowLine := line.new(currentBar.index, currentBar.low, currentBar.index, currentBar.low, xloc.bar_index, extend.none, color.new(asiaSessionColor, sessionsExtremeLines ? 0 : sessionsFillTransparency), line.style_solid, sessionsLinesWidth)
            
            if asiaSessionTitle == asiaSessionTitle
                asiatic_session_high := currentBar.high
                asiatic_session_low := currentBar.low
            if asiaSessionFillBackground
                linefill.new(highLine, lowLine, color.new(asiaSessionColor, sessionsFillTransparency))

            if sessionsNames
                sessionBox := box.new (currentBar.index, currentBar.low, currentBar.index, currentBar.low, text = asiaSessionTitle, text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_top, text_color = color.new(asiaSessionColor, 25), bgcolor = color(na), border_color = color(na))

        if isCurrentSession
            highLine.set_y1(math.max(currentBar.high, highLine.get_y1())), highLine.set_y2(math.max(currentBar.high, highLine.get_y2())), highLine.set_x2(currentBar.index)
            lowLine.set_y1(math.min(currentBar.low, lowLine.get_y1())), lowLine.set_y2(math.min(currentBar.low, lowLine.get_y2())), lowLine.set_x2(currentBar.index)

            if sessionsNames
                sessionBox.set_bottom(math.min(currentBar.low, lowLine.get_y1())), sessionBox.set_top(math.min(currentBar.low, lowLine.get_y1()))

        if not isCurrentSession and isCurrentSession != isCurrentSession[1]
            currentSession.highLine := line.new(currentBar.index - 1, highLine.get_y1(), currentBar.index, highLine.get_y2(), xloc.bar_index, extend.none, asiaSessionExtendMaxMinMid ? asiaSessionColor : color(na), line.style_dotted, sessionsLinesWidth)
            currentSession.midLine := line.new(currentBar.index - 1, math.avg(highLine.get_y1(), lowLine.get_y1()), currentBar.index, math.avg(highLine.get_y2(), lowLine.get_y2()), xloc.bar_index, extend.none, asiaSessionShowMargin ? asiaSessionColor : color(na), line.style_dotted, sessionsLinesWidth)
            currentSession.lowLine := line.new(currentBar.index - 1, lowLine.get_y1(), currentBar.index, lowLine.get_y2(), xloc.bar_index, extend.none, asiaSessionExtendMaxMinMid ? asiaSessionColor : color(na), line.style_dotted, sessionsLinesWidth)

            currentSession.buySide := false, currentSession.buyZone := false
            currentSession.sellSide := false, currentSession.sellZone := false

        if not isCurrentSession
            currentSession.highLine.set_x2(currentBar.index - 1)
            currentSession.midLine.set_x2(currentBar.index - 1)
            currentSession.lowLine.set_x2(currentBar.index - 1)

            if asiaSessionTitle == asiaSessionTitle and currentSession.lowPrice != 0
                lastHighLine.set_x2(currentBar.index - 1)
                lastMidLine.set_x2(currentBar.index - 1)
                lastLowLine.set_x2(currentBar.index - 1)

        if showBuySideSweepZones
            plotHigh = currentSession.highLine.get_y1()

            if not currentSession.buySide

                if currentBar.high > plotHigh and currentBar.open < plotHigh
                    alert(syminfo.ticker + ' buyside session level breached, price ' + str.tostring(currentBar.close, format.mintick) + ', timeframe ' + timeframe.period, alert .freq_once_per_bar)
                    currentSession.buyZoneBox := box.new (currentBar.index - 1, math.min(plotHigh + buySideSweepMargin * sweepAverageTrueRange, currentBar.high), currentBar.index + 1, plotHigh, bgcolor = buySideSweepColor, border_color = color(na))
                    buy_side_sweep := true

                    currentSession.buyZone := true
                    currentSession.buySide := true

            else if currentSession.buyZone

                if currentBar.low > plotHigh - buySideSweepMargin * sweepAverageTrueRange and currentBar.high < plotHigh + buySideSweepMargin * sweepAverageTrueRange
                    currentSession.buyZoneBox.set_top(math.max(currentBar.high, currentSession.buyZoneBox.get_top()))

                    if currentBar.high > plotHigh
                        currentSession.buyZoneBox.set_right(currentBar.index + 1)
                    na
                else
                    if currentBar.close > plotHigh + buySideSweepMargin * sweepAverageTrueRange * 1.5
                        currentSession.buyZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                        currentSession.buyZoneBox.set_right(currentBar.index)
                        currentSession.buyZone := false
                    else if currentBar.index - currentSession.buyZoneBox.get_right() >= sweepMarginLength
                        if currentBar.high > plotHigh + buySideSweepMargin * sweepAverageTrueRange
                            currentSession.buyZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                            currentSession.buyZoneBox.set_right(currentBar.index + 1)

                        currentSession.buyZone := false
                        if not detectSweepsOncePerSession
                            currentSession.buySide := false

            if asiaSessionTitle == asiaSessionTitle and newYorkAmSessionShow 
                lastPlotHigh = currentSession.highPrice

                if not currentSession.lastBuySide

                    if currentBar.high > lastPlotHigh and currentBar.open < lastPlotHigh
                        alert(syminfo.ticker + ' buyside session level breached, price ' + str.tostring(currentBar.close, format.mintick) + ', timeframe ' + timeframe.period, alert.freq_once_per_bar)
                        currentSession.lastBuyZoneBox := box.new (currentBar.index - 1, math.min(lastPlotHigh + buySideSweepMargin * sweepAverageTrueRange, currentBar.high), currentBar.index + 1, lastPlotHigh, bgcolor = buySideSweepColor, border_color = color(na))
                        buy_side_sweep := true

                        currentSession.lastBuyZone := true
                        currentSession.lastBuySide := true

                else if currentSession.lastBuyZone

                    if currentBar.low > lastPlotHigh - buySideSweepMargin * sweepAverageTrueRange and currentBar.high < lastPlotHigh + buySideSweepMargin * sweepAverageTrueRange
                        currentSession.lastBuyZoneBox.set_top(math.max(currentBar.high, currentSession.lastBuyZoneBox.get_top()))

                        if currentBar.high > lastPlotHigh
                            currentSession.lastBuyZoneBox.set_right(currentBar.index + 1)
                        na
                    else
                        if currentBar.close > lastPlotHigh + buySideSweepMargin * sweepAverageTrueRange * 1.5
                            currentSession.lastBuyZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                            currentSession.lastBuyZoneBox.set_right(currentBar.index)
                            currentSession.lastBuyZone := false
                        else if currentBar.index - currentSession.lastBuyZoneBox.get_right() >= sweepMarginLength
                            if currentBar.high > lastPlotHigh + buySideSweepMargin * sweepAverageTrueRange
                                currentSession.lastBuyZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                                currentSession.lastBuyZoneBox.set_right(currentBar.index + 1)

                            currentSession.lastBuyZone := false
                            if not detectSweepsOncePerSession
                                currentSession.lastBuySide := false

        if showSellSideSweepZones
            plotLow = currentSession.lowLine.get_y1()

            if not currentSession.sellSide

                if currentBar.low < plotLow and currentBar.open > plotLow
                    alert(syminfo.ticker + ' sellside session level breached, price ' + str.tostring(currentBar.close, format.mintick) + ', timeframe ' + timeframe.period, alert.freq_once_per_bar)
                    currentSession.sellZoneBox := box.new (currentBar.index - 1, plotLow, currentBar.index + 1, math.max(plotLow - sellSideSweepMargin * sweepAverageTrueRange, currentBar.low), bgcolor = sellSideSweepColor, border_color = color(na))
                    sell_side_sweep := true

                    currentSession.sellZone := true
                    currentSession.sellSide := true

            else if currentSession.sellZone

                if currentBar.low > plotLow - sellSideSweepMargin * sweepAverageTrueRange and currentBar.high < plotLow + sellSideSweepMargin * sweepAverageTrueRange
                    currentSession.sellZoneBox.set_bottom(math.min(currentBar.low, currentSession.sellZoneBox.get_bottom()))

                    if currentBar.low < plotLow
                        currentSession.sellZoneBox.set_right(currentBar.index + 1)
                    na
                else
                    if currentBar.close < plotLow - sellSideSweepMargin * sweepAverageTrueRange * 1.5
                        currentSession.sellZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                        currentSession.sellZoneBox.set_right(currentBar.index)
                        currentSession.sellZone := false
                    else if currentBar.index - currentSession.sellZoneBox.get_right() >= sweepMarginLength
                        if currentBar.low < plotLow - sellSideSweepMargin * sweepAverageTrueRange
                            currentSession.sellZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                            currentSession.sellZoneBox.set_right(currentBar.index + 1)

                        currentSession.sellZone := false
                        if not detectSweepsOncePerSession
                            currentSession.sellSide := false

            if asiaSessionTitle == asiaSessionTitle and newYorkAmSessionShow
                lastPlotLow = currentSession.lowPrice

                if not currentSession.lastSellSide

                    if currentBar.low < lastPlotLow and currentBar.open > lastPlotLow
                        alert(syminfo.ticker + ' sellside session level breached, price ' + str.tostring(currentBar.close, format.mintick) + ', timeframe ' + timeframe.period, alert.freq_once_per_bar)
                        currentSession.lastSellZoneBox := box.new (currentBar.index - 1, lastPlotLow, currentBar.index + 1, math.max(lastPlotLow - sellSideSweepMargin * sweepAverageTrueRange, currentBar.low), bgcolor = sellSideSweepColor, border_color = color(na))
                        sell_side_sweep := true

                        currentSession.lastSellZone := true
                        currentSession.lastSellSide := true

                else if currentSession.lastSellZone

                    if currentBar.low > lastPlotLow - sellSideSweepMargin * sweepAverageTrueRange and currentBar.high < lastPlotLow + sellSideSweepMargin * sweepAverageTrueRange
                        currentSession.lastSellZoneBox.set_bottom(math.min(currentBar.low, currentSession.lastSellZoneBox.get_bottom()))

                        if currentBar.low < lastPlotLow
                            currentSession.lastSellZoneBox.set_right(currentBar.index + 1)
                        na
                    else
                        if currentBar.close < lastPlotLow - sellSideSweepMargin * sweepAverageTrueRange * 1.5
                            currentSession.lastSellZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                            currentSession.lastSellZoneBox.set_right(currentBar.index)
                            currentSession.lastSellZone := false
                        else if currentBar.index - currentSession.lastSellZoneBox.get_right() >= sweepMarginLength
                            if currentBar.low < lastPlotLow - sellSideSweepMargin * sweepAverageTrueRange
                                currentSession.lastSellZoneBox.set_bgcolor(hideFakeSweepZones ? color(na) : fakeSweepColor)
                                currentSession.lastSellZoneBox.set_right(currentBar.index + 1)

                            currentSession.lastSellZone := false
                            if not detectSweepsOncePerSession
                                currentSession.lastSellSide := false

else
    var table note = table.new(position.bottom_right, 1, 1)
    if barstate.islast
        table.cell(note, 0, 0, 'Session Sweeps are supported on:       \n 1 min, 3 mins and 5 mins charts\n\n', text_size=size.small, text_color=chart.fg_color)

//-----------------------------------------------------------------------------}
// Calculations - Market Structure Shifts
//-----------------------------------------------------------------------------{

pivotHigh = ta.pivothigh(marketStructureShiftsDetectionLength, marketStructureShiftsDetectionLength)
pivotLow = ta.pivotlow (marketStructureShiftsDetectionLength, marketStructureShiftsDetectionLength)

if not na(pivotHigh)
    currentPivotPoint.high  := pivotHigh
    currentPivotPoint.highCrossed := false
    currentPivotPoint.highTime := currentBar.index - marketStructureShiftsDetectionLength

if not na(pivotLow)
    currentPivotPoint.low  := pivotLow
    currentPivotPoint.lowCrossed := false
    currentPivotPoint.lowTime := currentBar.index - marketStructureShiftsDetectionLength

if marketStructureShiftsShow
    if currentBar.close > currentPivotPoint.high and not currentPivotPoint.highCrossed
        currentPivotPoint.highCrossed := true

        if shift == -1
            line.new(currentPivotPoint.highTime, currentPivotPoint.high, currentBar.index, currentPivotPoint.high, color = marketStructureShiftsBullishColor)
            box.new (currentPivotPoint.highTime, currentPivotPoint.high, currentBar.index, currentPivotPoint.high, text = 'CHoCH', text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_bottom, 
                      text_color = marketStructureShiftsBullishColor, bgcolor = color(na), border_color = color(na))
            marketStructureShiftsBullish := true
        shift := 1

    if currentBar.close < currentPivotPoint.low and not currentPivotPoint.lowCrossed
        currentPivotPoint.lowCrossed := true

        if shift == 1
            line.new(currentPivotPoint.lowTime, currentPivotPoint.low, currentBar.index, currentPivotPoint.low, color = marketStructureShiftsBearishColor)
            box.new (currentPivotPoint.lowTime, currentPivotPoint.low, currentBar.index, currentPivotPoint.low, text = 'CHoCH', text_size = size.tiny, text_halign = text.align_left, text_valign = text.align_top, 
                      text_color = marketStructureShiftsBearishColor, bgcolor = color(na), border_color = color(na))
            marketStructureShiftsBearish := true
        shift := -1

//-----------------------------------------------------------------------------}
// Calculations - Fair Value Gaps
//-----------------------------------------------------------------------------{

if fairValueGapsShow
    bullishGap = currentBar.low > currentBar.high[1]
    bearishGap = currentBar.high < currentBar.low[1]

    bullish  = (currentBar.low - currentBar.high[2]) > fairValueGapAverageTrueRange and currentBar.low > currentBar.high[2] and currentBar.close[1] > currentBar.high[2] and not (bullishGap or bullishGap[1])

    if bullish 
        if currentFairValueGap.upperFairValueGaps.size() > 0
            currentFairValueGap.clearFairValueGap()

        currentFairValueGap.upperFairValueGaps.push(box.new (currentBar.index - 1, currentBar.low, currentBar.index, currentBar.high[2], na, bgcolor = fairValueGapsBullishColor))

        last := true

    bearish  = (currentBar.low[2] - currentBar.high) > fairValueGapAverageTrueRange and currentBar.high < currentBar.low[2] and currentBar.close[1] < currentBar.low[2] and not (bearishGap or bearishGap[1])

    if bearish 
        if currentFairValueGap.upperFairValueGaps.size() > 0
            currentFairValueGap.clearFairValueGap()


        currentFairValueGap.upperFairValueGaps.push(box.new (currentBar.index - 1, currentBar.low[2], currentBar.index, currentBar.high, na, bgcolor = fairValueGapsBearishColor))

        last := false

    if bullishGap or bearishGap
        if currentFairValueGap.upperFairValueGaps.size() > 0
            currentFairValueGap.clearFairValueGap()


    if currentFairValueGap.upperFairValueGaps.size() > 0
        updateFairValueGap(currentFairValueGap, currentBar.high, currentBar.low, last)

//-----------------------------------------------------------------------------}
// Strategy
//-----------------------------------------------------------------------------{


// Variabile per tenere traccia dell'ultimo giorno eseguito
var int lastExecutedDay = na

// Ottieni il giorno corrente
currentDay = dayofweek(time)

// Controlla se il giorno corrente è diverso dall'ultimo giorno eseguito
if (currentDay != lastExecutedDay)
    if buy_side_sweep
        if marketStructureShiftsBearish
            strategy.entry("Short", strategy.short)
            strategy.exit("Take Profit", "Short", limit=asiatic_session_low)
            strategy.exit("Stop Loss", "Short", stop=asiatic_session_high)
            lastExecutedDay := currentDay
    if sell_side_sweep
        if marketStructureShiftsBullish

            strategy.entry("Long", strategy.long)
            strategy.exit("Take Profit", "Long", limit=asiatic_session_high)
            strategy.exit("Stop Loss", "Long", stop=asiatic_session_low)
            lastExecutedDay := currentDay
    label.new(bar_index, high, "Eseguito oggi", color=color.green, style=label.style_label_down)

    // Aggiorna l'ultimo giorno eseguito
    



//-----------------------------------------------------------------------------}

